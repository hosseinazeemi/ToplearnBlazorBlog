@using TB.Shared.Dto.Global
@using Tewr.Blazor.FileReader
@inject IFileReaderService _fileService
@inject IConfiguration config

<div class="row gap-2 p-2">
    @if (!string.IsNullOrEmpty(CurrentImage))
    {
        <div class="col-md-3">
            <img src="@(Path.Combine(config.GetValue<string>("ApiBaseUrl") , CurrentImage))" class="rounded" width="220" height="180" />
        </div>
    }

    <div class="col-md-12">
        <label class="form-label">فایل را انتخاب کنید</label>
        <input type="file" class="form-control" @ref="_ref" @onchange="OnSelectFile" />
    </div>

    @if (selectedFile != null)
    {
        <div class="col-md-12 text-center">
            <embed class="file-preview"
               height="240"
               width="300"
               type="@selectedFile.MimeType"
               src="data:@selectedFile.MimeType;base64,@(Convert.ToBase64String(selectedFile.Bytes))" />
        </div>
        <div class="col-md-12 text-center">
            <button class="btn btn-success" @onclick="ConfirmFile">تایید فایل</button>
        </div>
    }
</div>

@code {
    ElementReference _ref;
    byte[] fileBytes;
    FileDto selectedFile;
    [Parameter]
    public EventCallback<FileDto> OnConfirmFile { get; set; }

    [Parameter]
    public string? CurrentImage { get; set; }

    public async Task OnSelectFile()
    {
        selectedFile = null;
        fileBytes = new byte[0];

        foreach (var item in await _fileService.CreateReference(_ref).EnumerateFilesAsync())
        {
            using (MemoryStream ms = await item.CreateMemoryStreamAsync(2048))
            {
                fileBytes = new byte[ms.Length];
                ms.Read(fileBytes, 0, (int)ms.Length);
            }

            var fileInfo = item.ReadFileInfoAsync().Result;
            selectedFile = new FileDto
                {
                    Bytes = fileBytes,
                    Extension = fileInfo.Name.Split(".")[1],
                    MimeType = fileInfo.Type,
                    Name = fileInfo.Name
                };
        }
        CurrentImage = null;
        StateHasChanged();
    }
    public async Task ConfirmFile()
    {
        if (OnConfirmFile.HasDelegate)
            await OnConfirmFile.InvokeAsync(selectedFile);

        selectedFile = null;
        fileBytes = new byte[0];
    }
}